clc
clear all
close all
diary('log_184738_lab3')

% odpowiednie fragmenty kodu można wykonać poprzez znazaczenie i wciśnięcie F9
% komentowanie/ odkomentowywanie: ctrl+r / ctrl+t

% Zadanie A
%------------------
N = 10;
density = 3; % parametr decydujący o gestosci polaczen miedzy stronami
indeks = 184738;
[Edges] = generate_network(N, density); % [Edges] = generate_network(N, density, indeks);
%-----------------

% Zadanie B
%------------------
% generacja macierzy I, A, B i wektora b
% ...
% macierze A, B i I muszą być przechowywane w formacie sparse (rzadkim)
d = 0.85;
B = sparse(Edges(2,:), Edges(1,:), 1, N, N);
I = speye(N);
L = zeros(1,N);
A = speye(N);
for i = 1:N
  L(i) = sum(B(:,i));
  A(i,i)=A(i,i)/L(i);
end
b = zeros(N,1);
b = ((b+1)-d)/N;

save zadB_184738 A B I b
%-----------------



%-----------------
% Zadanie C
%-----------------
% rozwiazanie ukladu rownan

M = sparse(I - d * B * A);
r = M \ b;

save zadC_184738 r



% Zadanie D
%------------------
clc
clear all
close all

N = [500, 1000, 3000, 6000, 12000];
d = 0.85;
density = 10;

for i = 1:5
    [Edges] = generate_network(N(i), density);
    B = sparse(Edges(2,:), Edges(1,:), 1, N(i), N(i));
    I = speye(N(i));
    L = zeros(1,N(i));
    A = speye(N(i));
    for j = 1:N(i)
      L(j) = sum(B(:,j));
      A(j,j)=A(j,j)/L(j);
    end
    b = zeros(N(i),1);
    b = ((b+1)-d)/N(i);
    M = sparse(I - d * B * A);

    tic
    r = M \ b;
    czas_Gauss(i) = toc;
end

plot(N, czas_Gauss)
title("Czas bezpośredniego rozwiązania układu równań w zależności od liczby stron");
xlabel("Liczba stron");
ylabel("Czas [s]");
saveas(gcf,'zadD_184738.png')
%------------------



% Zadanie E
%------------------
clc
clear all
close all

% przykład działania funkcji tril, triu, diag:
% Z = rand(4,4)
% tril(Z,-1) 
% triu(Z,1) 
% diag(diag(Z))
N = [500, 1000, 3000, 6000, 12000];
density = 10;
d = 0.85;
stop = 10^(-14);

for i = 1:5
    [Edges] = generate_network(N(i), density);
    B = sparse(Edges(2,:), Edges(1,:), 1, N(i), N(i));
    I = speye(N(i));
    L = zeros(1,N(i));
    A = speye(N(i));
    for j = 1:N(i)
      L(j) = sum(B(:,j));
      A(j,j)=A(j,j)/L(j);
    end
    b = zeros(N(i),1);
    b = ((b+1)-d)/N(i);
    M = sparse(I - d * B * A);

    tic
    %obliczenia
    czas_Jacobi(i) = toc;
end

plot(N, czas_Jacobi)
%------------------








